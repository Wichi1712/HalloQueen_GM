<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_brujita</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
image_speed = 0.05;

velocidad = 3
moveH = 0;
moveV = 0;

ANCHO = room_width;
ALTO = room_height;

/*
 * Obtenemos el ancho y alto del sprite(imagen)
    de nuestro personaje.
 * TEnemos dos formas de hacerlo

*/
//Opcion1
anchoSprite = sprite_width;// 16;
altoSprite = sprite_height;// 32;


//Opcion 2
//anchoSprite = sprite_get_width( sprite_index);
//altoSprite = sprite_get_height( sprite_index);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
left = -keyboard_check( vk_left);
right = keyboard_check( vk_right);
up = -keyboard_check( vk_up);
down = keyboard_check( vk_down);

//Horizontal move
moveX = left + right
moveH = moveX * velocidad
x += moveH;

//Vertical move
moveY = up + down
moveV = moveY * velocidad
y += moveV;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Limites de pantalla
/*
 * Establecemos lo limites del personaje en el eje X y el eje Y
 * Restamos el ancho de nuestro del sprite al ancho de nuestra room
    esto permite que haya un espacio extre el personaje y los
    limites de la room;
*/

//OPCION 1
x = clamp(x,anchoSprite , ANCHO - anchoSprite);
y = clamp(y,altoSprite, ALTO - altoSprite);

//--------------------------------------------------
/*
//OPCION 2  Otra forma de establecer los limites
//Limite en el eje X
if x &lt; anchoSprite x = anchoSprite; else
if x &gt; ANCHO - anchoSprite x = ANCHO - anchoSprite;

//Limite en el eje Y
if y &lt; altoSprite y = altoSprite; else
if y &gt; ALTO - altoSprite y = ALTO - altoSprite;

*/


//PUEDEN ESCOGER CUALQUIERA DE LAS DOS FORMAS, YO
//PREFIERO LA OPCION 1





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Developed test
//show_debug_message("moveH: " + string(moveH));
//show_debug_message("moveV: " + string(moveV));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disparo
shoot = keyboard_check( vk_space);

if (shoot &amp;&amp; distance_to_object( o_calabaza) &gt; 80){
    if !place_meeting(x, y - 30,o_calabaza) instance_create(x,y - 30,o_calabaza);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
